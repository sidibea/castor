{% extends "CASTORAdminBundle::layout.html.twig" %}

{% block title %}
    Classes
{% endblock %}

{% block content %}

<section class="content-header">
    <h1>
        Classes
        <small>Ajouter une classe</small>
    </h1>
    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-dashboard"></i> Acceuil</a></li>
        <li class="active">Classe</li>
    </ol>
</section>
<section class="content">
    <div class="row">
        <section class="col-lg-12">
            <div class="box box-solid">
                <div class="box-header">
                    <h3 class="box-title">Nouvelle Classe</h3>
                </div>
                {{ form_start(form) }}

                {# Les erreurs générales du formulaire. #}
                {{ form_errors(form) }}
                <div class="box-body">
                    <div class="form-group">
                        {{ form_label(form.code, "Code ") }}

                        {# Affichage des erreurs pour ce champ précis. #}
                        {{ form_errors(form.code) }}
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-bell"></i>
                            </div>
                            {# Génération de l'input. #}
                            {{ form_widget(form.code, {'attr': {'class': 'form-control', 'placeholder' : '' }}) }}
                        </div>
                     </div>
                    <div class="form-group">
                        {{ form_label(form.nom, "Nom de la classe ") }}

                        {# Affichage des erreurs pour ce champ précis. #}
                        {{ form_errors(form.nom) }}
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-bell"></i>
                            </div>
                            {# Génération de l'input. #}
                            {{ form_widget(form.nom, {'attr': {'class': 'form-control', 'placeholder' : '' }}) }}
                        </div>
                    </div>
                    <div class="form-group">
                        {{ form_label(form.isEnabled, "Active ") }}

                        {# Affichage des erreurs pour ce champ précis. #}
                        {{ form_errors(form.isEnabled) }}

                        {# Génération de l'input. #}
                        {{ form_widget(form.isEnabled, {'attr': {'class': '', 'placeholder' : '' }}) }}
                    </div>
                    <div class="form-group">
                        {{ form_label(form.dateTrimestriel, "Date Trimestrielle ") }}

                        {# Affichage des erreurs pour ce champ précis. #}
                        {{ form_errors(form.dateTrimestriel) }}

                        {# Génération de l'input. #}
                        {{ form_widget(form.dateTrimestriel, {'attr': {'class': '', 'placeholder' : '' }}) }}
                    </div>
                </div>
                <div class="box-footer">
                    <button type="submit" class="btn btn-primary">Valider</button>
                </div>


                {# Génération automatique des champs pas encore écrits.
                              Dans cet exemple, ce serait le champ CSRF (géré automatiquement par Symfony !)
                              et tous les champs cachés (type « hidden »). #}
                {{ form_rest(form) }}

                {# Fermeture de la balise <form> du formulaire HTML #}
                {{ form_end(form) }}
            </div>
        </section>
    </div>
 </section>
{% endblock %}

{% block script %}
    <script type="text/javascript">
        $(function () {

            //Activate the iCheck Plugin
            $('input[type="radio"]').iCheck({
                checkboxClass: 'icheckbox_flat-blue',
                radioClass: 'iradio_flat-blue'
            });
            // On récupère la balise <div> en question qui contient l'attribut « data-prototype » qui nous intéresse.
            var $container = $('div#castor_adminbundle_classes_dateTrimestriel');

            // On ajoute un lien pour ajouter une nouvelle catégorie
            var $addLink = $('<a href="#" id="add_category"  class="btn btn-default">Ajouter une nouvelle periode</a>');
            $container.append($addLink);

            // On ajoute un nouveau champ à chaque clic sur le lien d'ajout.
            $addLink.click(function(e) {
                addCategory($container);
                e.preventDefault(); // évite qu'un # apparaisse dans l'URL
                return false;
            });

            // On définit un compteur unique pour nommer les champs qu'on va ajouter dynamiquement
            var index = $container.find(':input').length;

            // On ajoute un premier champ automatiquement s'il n'en existe pas déjà un (cas d'une nouvelle annonce par exemple).
            if (index == 0) {
                addCategory($container);
            } else {
                // Pour chaque catégorie déjà existante, on ajoute un lien de suppression
                $container.children('div').each(function() {
                    addDeleteLink($(this));
                });
            }

            // La fonction qui ajoute un formulaire Categorie
            function addCategory($container) {
                // Dans le contenu de l'attribut « data-prototype », on remplace :
                // - le texte "__name__label__" qu'il contient par le label du champ
                // - le texte "__name__" qu'il contient par le numéro du champ
                var $prototype = $($container.attr('data-prototype').replace(/__name__label__/g, 'Periode n°' + (index+1))
                        .replace(/__name__/g, index));

                // On ajoute au prototype un lien pour pouvoir supprimer la catégorie
                addDeleteLink($prototype);

                // On ajoute le prototype modifié à la fin de la balise <div>
                $container.append($prototype);

                // Enfin, on incrémente le compteur pour que le prochain ajout se fasse avec un autre numéro
                index++;
            }

            // La fonction qui ajoute un lien de suppression d'une catégorie
            function addDeleteLink($prototype) {
                // Création du lien
                $deleteLink = $('<br><a href="#" class="btn btn-danger">Supprimer</a>');

                // Ajout du lien
                $prototype.append($deleteLink);

                // Ajout du listener sur le clic du lien
                $deleteLink.click(function(e) {
                    $prototype.remove();
                    e.preventDefault(); // évite qu'un # apparaisse dans l'URL
                    return false;
                });
            }

            var dateToday = new Date();
            $(".datepicker").datepicker({
                minDate:0,
                format: 'yyyy-mm-dd'
            });


        });
    </script>
{% endblock %}